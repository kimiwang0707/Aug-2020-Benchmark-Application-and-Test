// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject_D201BenchmarkApp
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod_Add - Use 'RecordedMethod_AddParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod_Add()
        {
            #region Variable Declarations
            WinEdit uITbxIdInputEdit = this.UIWhitireiaStaffManageWindow.UITbxIdInputWindow.UITbxIdInputEdit;
            WinEdit uITbxNameInputEdit = this.UIWhitireiaStaffManageWindow.UITbxNameInputWindow.UITbxNameInputEdit;
            WinDateTimePicker uIDateTimePicker1DateTimePicker = this.UIWhitireiaStaffManageWindow.UIDateTimePicker1Window.UIDateTimePicker1DateTimePicker;
            WinEdit uITbxEmailInputEdit = this.UIWhitireiaStaffManageWindow.UITbxEmailInputWindow.UITbxEmailInputEdit;
            WinEdit uITbxSalaryInputEdit = this.UIWhitireiaStaffManageWindow.UITbxSalaryInputWindow.UITbxSalaryInputEdit;
            WinButton uIAddButton = this.UIWhitireiaStaffManageWindow.UIAddWindow.UIAddButton;
            WinButton uI确定Button = this.UI确定Window.UI确定Button;
            WinButton uILoadButton = this.UIWhitireiaStaffManageWindow.UILoadWindow.UILoadButton;
            #endregion

            // Type '2010892' in 'tbxIdInput' text box
            uITbxIdInputEdit.Text = this.RecordedMethod_AddParams.UITbxIdInputEditText;

            // Type 'Faye Wong' in 'tbxNameInput' text box
            uITbxNameInputEdit.Text = this.RecordedMethod_AddParams.UITbxNameInputEditText;

            // Select '19/09/1989' in 'dateTimePicker1' date time picker
            uIDateTimePicker1DateTimePicker.DateTimeAsString = this.RecordedMethod_AddParams.UIDateTimePicker1DateTimePickerDateTimeAsString;

            // Type 'fayewong@hotmail.com' in 'tbxEmailInput' text box
            uITbxEmailInputEdit.Text = this.RecordedMethod_AddParams.UITbxEmailInputEditText;

            // Type '145000' in 'tbxSalaryInput' text box
            uITbxSalaryInputEdit.Text = this.RecordedMethod_AddParams.UITbxSalaryInputEditText;

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(22, 10));

            // Click '确定' button
            Mouse.Click(uI确定Button, new Point(30, 19));

            // Click 'Load' button
            Mouse.Click(uILoadButton, new Point(27, 8));
        }
        
        /// <summary>
        /// RecordedMethod_IllegalIdInput - Use 'RecordedMethod_IllegalIdInputParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod_IllegalIdInput()
        {
            #region Variable Declarations
            WinEdit uITbxIdInputEdit = this.UIWhitireiaStaffManageWindow.UITbxIdInputWindow.UITbxIdInputEdit;
            WinEdit uITbxNameInputEdit = this.UIWhitireiaStaffManageWindow.UITbxNameInputWindow.UITbxNameInputEdit;
            WinEdit uITbxEmailInputEdit = this.UIWhitireiaStaffManageWindow.UITbxEmailInputWindow.UITbxEmailInputEdit;
            WinEdit uITbxSalaryInputEdit = this.UIWhitireiaStaffManageWindow.UITbxSalaryInputWindow.UITbxSalaryInputEdit;
            WinButton uIAddButton = this.UIWhitireiaStaffManageWindow.UIAddWindow.UIAddButton;
            #endregion

            // Type '">?":?' in 'tbxIdInput' text box
            uITbxIdInputEdit.Text = this.RecordedMethod_IllegalIdInputParams.UITbxIdInputEditText;

            // Type 'Test Lee' in 'tbxNameInput' text box
            uITbxNameInputEdit.Text = this.RecordedMethod_IllegalIdInputParams.UITbxNameInputEditText;

            // Type 'test@hotmail.com' in 'tbxEmailInput' text box
            uITbxEmailInputEdit.Text = this.RecordedMethod_IllegalIdInputParams.UITbxEmailInputEditText;

            // Type '12300' in 'tbxSalaryInput' text box
            uITbxSalaryInputEdit.Text = this.RecordedMethod_IllegalIdInputParams.UITbxSalaryInputEditText;

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(75, 21));
        }
        
        /// <summary>
        /// AssertMethod_IllegalIdInput - Use 'AssertMethod_IllegalIdInputExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_IllegalIdInput()
        {
            #region Variable Declarations
            WinControl uIErrorDialog = this.UIErrorWindow.UIErrorDialog;
            #endregion

            // Verify that the 'Name' property of 'Error' Dialog equals 'Error'
            Assert.AreEqual(this.AssertMethod_IllegalIdInputExpectedValues.UIErrorDialogName, uIErrorDialog.Name);
        }
        
        /// <summary>
        /// RecordedMethod_IllegalNameInput - Use 'RecordedMethod_IllegalNameInputParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod_IllegalNameInput()
        {
            #region Variable Declarations
            WinButton uI确定Button = this.UIErrorWindow.UI确定Window.UI确定Button;
            WinButton uIClearButton = this.UIWhitireiaStaffManageWindow.UIClearWindow.UIClearButton;
            WinEdit uITbxIdInputEdit = this.UIWhitireiaStaffManageWindow.UITbxIdInputWindow.UITbxIdInputEdit;
            WinEdit uITbxNameInputEdit = this.UIWhitireiaStaffManageWindow.UITbxNameInputWindow.UITbxNameInputEdit;
            WinDateTimePicker uIDateTimePicker1DateTimePicker = this.UIWhitireiaStaffManageWindow.UIDateTimePicker1Window.UIDateTimePicker1DateTimePicker;
            WinEdit uITbxEmailInputEdit = this.UIWhitireiaStaffManageWindow.UITbxEmailInputWindow.UITbxEmailInputEdit;
            WinEdit uITbxSalaryInputEdit = this.UIWhitireiaStaffManageWindow.UITbxSalaryInputWindow.UITbxSalaryInputEdit;
            WinButton uIAddButton = this.UIWhitireiaStaffManageWindow.UIAddWindow.UIAddButton;
            #endregion

            // Click '确定' button
            Mouse.Click(uI确定Button, new Point(32, 17));

            // Click 'Clear' button
            Mouse.Click(uIClearButton, new Point(69, 19));

            // Type '00000' in 'tbxIdInput' text box
            uITbxIdInputEdit.Text = this.RecordedMethod_IllegalNameInputParams.UITbxIdInputEditText;

            // Type '56'.''.,' in 'tbxNameInput' text box
            uITbxNameInputEdit.Text = this.RecordedMethod_IllegalNameInputParams.UITbxNameInputEditText;

            // Select '28/06/2000' in 'dateTimePicker1' date time picker
            uIDateTimePicker1DateTimePicker.DateTimeAsString = this.RecordedMethod_IllegalNameInputParams.UIDateTimePicker1DateTimePickerDateTimeAsString;

            // Type 'test@gmail.com' in 'tbxEmailInput' text box
            uITbxEmailInputEdit.Text = this.RecordedMethod_IllegalNameInputParams.UITbxEmailInputEditText;

            // Type '111111' in 'tbxSalaryInput' text box
            uITbxSalaryInputEdit.Text = this.RecordedMethod_IllegalNameInputParams.UITbxSalaryInputEditText;

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(52, 15));
        }
        
        /// <summary>
        /// AssertMethod_IllegalNameInput - Use 'AssertMethod_IllegalNameInputExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_IllegalNameInput()
        {
            #region Variable Declarations
            WinText uINamemustbeEnglishletText = this.UIErrorWindow.UINamemustbeEnglishletWindow.UINamemustbeEnglishletText;
            #endregion

            // Verify that the 'DisplayText' property of 'Name must be English letters!' label equals 'Name must be English letters!'
            Assert.AreEqual(this.AssertMethod_IllegalNameInputExpectedValues.UINamemustbeEnglishletTextDisplayText, uINamemustbeEnglishletText.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod_IllegalEmailInput - Use 'RecordedMethod_IllegalEmailInputParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod_IllegalEmailInput()
        {
            #region Variable Declarations
            WinButton uI确定Button = this.UIErrorWindow.UI确定Window.UI确定Button;
            WinButton uIClearButton = this.UIWhitireiaStaffManageWindow.UIClearWindow.UIClearButton;
            WinEdit uITbxIdInputEdit = this.UIWhitireiaStaffManageWindow.UITbxIdInputWindow.UITbxIdInputEdit;
            WinEdit uITbxNameInputEdit = this.UIWhitireiaStaffManageWindow.UITbxNameInputWindow.UITbxNameInputEdit;
            WinEdit uITbxEmailInputEdit = this.UIWhitireiaStaffManageWindow.UITbxEmailInputWindow.UITbxEmailInputEdit;
            WinWindow uITbxSalaryInputWindow = this.UIWhitireiaStaffManageWindow.UIInputStaffInformatioGroup.UITbxSalaryInputWindow;
            WinEdit uITbxSalaryInputEdit = this.UIWhitireiaStaffManageWindow.UITbxSalaryInputWindow.UITbxSalaryInputEdit;
            WinButton uIAddButton = this.UIWhitireiaStaffManageWindow.UIAddWindow.UIAddButton;
            #endregion

            // Click '确定' button
            Mouse.Click(uI确定Button, new Point(37, 13));

            // Click 'Clear' button
            Mouse.Click(uIClearButton, new Point(75, 9));

            // Type '11111' in 'tbxIdInput' text box
            uITbxIdInputEdit.Text = this.RecordedMethod_IllegalEmailInputParams.UITbxIdInputEditText;

            // Type 'Test' in 'tbxNameInput' text box
            uITbxNameInputEdit.Text = this.RecordedMethod_IllegalEmailInputParams.UITbxNameInputEditText;

            // Type 'test@com' in 'tbxEmailInput' text box
            uITbxEmailInputEdit.Text = this.RecordedMethod_IllegalEmailInputParams.UITbxEmailInputEditText;

            // Click 'tbxSalaryInput' window
            Mouse.Click(uITbxSalaryInputWindow, new Point(33, 22));

            // Type '11111' in 'tbxSalaryInput' text box
            uITbxSalaryInputEdit.Text = this.RecordedMethod_IllegalEmailInputParams.UITbxSalaryInputEditText;

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(20, 24));
        }
        
        /// <summary>
        /// AssertMethod_lllegalEmailInput - Use 'AssertMethod_lllegalEmailInputExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_lllegalEmailInput()
        {
            #region Variable Declarations
            WinText uIWrongemailformatText = this.UIErrorWindow.UINamemustbeEnglishletWindow.UIWrongemailformatText;
            #endregion

            // Verify that the 'DisplayText' property of 'Wrong email format!' label equals 'Wrong email format!'
            Assert.AreEqual(this.AssertMethod_lllegalEmailInputExpectedValues.UIWrongemailformatTextDisplayText, uIWrongemailformatText.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod_IllegalDOB - Use 'RecordedMethod_IllegalDOBParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod_IllegalDOB()
        {
            #region Variable Declarations
            WinButton uI确定Button = this.UIErrorWindow.UI确定Window.UI确定Button;
            WinButton uIClearButton = this.UIWhitireiaStaffManageWindow.UIClearWindow.UIClearButton;
            WinEdit uITbxIdInputEdit = this.UIWhitireiaStaffManageWindow.UITbxIdInputWindow.UITbxIdInputEdit;
            WinEdit uITbxNameInputEdit = this.UIWhitireiaStaffManageWindow.UITbxNameInputWindow.UITbxNameInputEdit;
            WinDateTimePicker uIDateTimePicker1DateTimePicker = this.UIWhitireiaStaffManageWindow.UIDateTimePicker1Window.UIDateTimePicker1DateTimePicker;
            WinEdit uITbxEmailInputEdit = this.UIWhitireiaStaffManageWindow.UITbxEmailInputWindow.UITbxEmailInputEdit;
            WinEdit uITbxSalaryInputEdit = this.UIWhitireiaStaffManageWindow.UITbxSalaryInputWindow.UITbxSalaryInputEdit;
            WinButton uIAddButton = this.UIWhitireiaStaffManageWindow.UIAddWindow.UIAddButton;
            #endregion

            // Click '确定' button
            Mouse.Click(uI确定Button, new Point(30, 16));

            // Click 'Clear' button
            Mouse.Click(uIClearButton, new Point(40, 28));

            // Type '1111' in 'tbxIdInput' text box
            uITbxIdInputEdit.Text = this.RecordedMethod_IllegalDOBParams.UITbxIdInputEditText;

            // Type 'Test Wang' in 'tbxNameInput' text box
            uITbxNameInputEdit.Text = this.RecordedMethod_IllegalDOBParams.UITbxNameInputEditText;

            // Select '14/07/1899' in 'dateTimePicker1' date time picker
            uIDateTimePicker1DateTimePicker.DateTimeAsString = this.RecordedMethod_IllegalDOBParams.UIDateTimePicker1DateTimePickerDateTimeAsString;

            // Type 'test@hotmail.com' in 'tbxEmailInput' text box
            uITbxEmailInputEdit.Text = this.RecordedMethod_IllegalDOBParams.UITbxEmailInputEditText;

            // Type '12345' in 'tbxSalaryInput' text box
            uITbxSalaryInputEdit.Text = this.RecordedMethod_IllegalDOBParams.UITbxSalaryInputEditText;

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(62, 8));
        }
        
        /// <summary>
        /// AssertMethod_IllegalDOB - Use 'AssertMethod_IllegalDOBExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_IllegalDOB()
        {
            #region Variable Declarations
            WinText uIDatemustbebetween190Text = this.UIErrorWindow.UINamemustbeEnglishletWindow.UIDatemustbebetween190Text;
            #endregion

            // Verify that the 'DisplayText' property of 'Date must be between 1900-2020!' label equals 'Date must be between 1900-2020!'
            Assert.AreEqual(this.AssertMethod_IllegalDOBExpectedValues.UIDatemustbebetween190TextDisplayText, uIDatemustbebetween190Text.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod_IllegalSalaryInput - Use 'RecordedMethod_IllegalSalaryInputParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod_IllegalSalaryInput()
        {
            #region Variable Declarations
            WinButton uI确定Button = this.UIErrorWindow.UI确定Window.UI确定Button;
            WinButton uIClearButton = this.UIWhitireiaStaffManageWindow.UIClearWindow.UIClearButton;
            WinEdit uITbxIdInputEdit = this.UIWhitireiaStaffManageWindow.UITbxIdInputWindow.UITbxIdInputEdit;
            WinEdit uITbxNameInputEdit = this.UIWhitireiaStaffManageWindow.UITbxNameInputWindow.UITbxNameInputEdit;
            WinEdit uITbxEmailInputEdit = this.UIWhitireiaStaffManageWindow.UITbxEmailInputWindow.UITbxEmailInputEdit;
            WinEdit uITbxSalaryInputEdit = this.UIWhitireiaStaffManageWindow.UITbxSalaryInputWindow.UITbxSalaryInputEdit;
            WinButton uIAddButton = this.UIWhitireiaStaffManageWindow.UIAddWindow.UIAddButton;
            #endregion

            // Click '确定' button
            Mouse.Click(uI确定Button, new Point(40, 13));

            // Click 'Clear' button
            Mouse.Click(uIClearButton, new Point(71, 17));

            // Type '0000' in 'tbxIdInput' text box
            uITbxIdInputEdit.Text = this.RecordedMethod_IllegalSalaryInputParams.UITbxIdInputEditText;

            // Type 'Test Lee' in 'tbxNameInput' text box
            uITbxNameInputEdit.Text = this.RecordedMethod_IllegalSalaryInputParams.UITbxNameInputEditText;

            // Type 'test@163.com' in 'tbxEmailInput' text box
            uITbxEmailInputEdit.Text = this.RecordedMethod_IllegalSalaryInputParams.UITbxEmailInputEditText;

            // Type 'hf;'./' in 'tbxSalaryInput' text box
            uITbxSalaryInputEdit.Text = this.RecordedMethod_IllegalSalaryInputParams.UITbxSalaryInputEditText;

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(34, 23));
        }
        
        /// <summary>
        /// AssertMethod_IllegalSalaryInput - Use 'AssertMethod_IllegalSalaryInputExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_IllegalSalaryInput()
        {
            #region Variable Declarations
            WinText uISalarymustbenumbersText = this.UIErrorWindow.UINamemustbeEnglishletWindow.UISalarymustbenumbersText;
            #endregion

            // Verify that the 'DisplayText' property of 'Salary must be numbers!' label equals 'Salary must be numbers!'
            Assert.AreEqual(this.AssertMethod_IllegalSalaryInputExpectedValues.UISalarymustbenumbersTextDisplayText, uISalarymustbenumbersText.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod_Ascending
        /// </summary>
        public void RecordedMethod_Ascending()
        {
            #region Variable Declarations
            WinButton uILoadButton = this.UIWhitireiaStaffManageWindow.UILoadWindow.UILoadButton;
            WinButton uIAscendingbyNameButton = this.UIWhitireiaStaffManageWindow.UIAscendingbyNameWindow.UIAscendingbyNameButton;
            #endregion

            // Click 'Load' button
            Mouse.Click(uILoadButton, new Point(28, 8));

            // Click 'Ascending by Name' button
            Mouse.Click(uIAscendingbyNameButton, new Point(42, 8));
        }
        
        /// <summary>
        /// RecordedMethod_CloseReminder
        /// </summary>
        public void RecordedMethod_CloseReminder()
        {
            #region Variable Declarations
            WinButton uI确定Button = this.UIErrorWindow.UI确定Window.UI确定Button;
            WinButton uIClearButton = this.UIWhitireiaStaffManageWindow.UIClearWindow.UIClearButton;
            #endregion

            // Click '确定' button
            Mouse.Click(uI确定Button, new Point(51, 17));

            // Click 'Clear' button
            Mouse.Click(uIClearButton, new Point(53, 10));
        }
        
        /// <summary>
        /// AssertMethod_Ascending - Use 'AssertMethod_AscendingExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_Ascending()
        {
            #region Variable Declarations
            WinRow uI行0Row = this.UIWhitireiaStaffManageWindow.UIDataGridView1Window.UIDataGridViewTable.UI行0Row;
            #endregion

            // Verify that the 'Value' property of '行 0' row equals '2006780;Britney Spears;13/11/1975;britneyspears@gmail.com;230920'
            Assert.AreEqual(this.AssertMethod_AscendingExpectedValues.UI行0RowValue, uI行0Row.Value);
        }
        
        /// <summary>
        /// AssertMethod_Ascending2 - Use 'AssertMethod_Ascending2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_Ascending2()
        {
            #region Variable Declarations
            WinRow uI行8Row = this.UIWhitireiaStaffManageWindow.UIDataGridView1Window.UIDataGridViewTable.UI行8Row;
            #endregion

            // Verify that the 'Value' property of '行 8' row equals '2011097;Taylor Swift;23/1/1993;taylorswift@hotmail.com;237890'
            Assert.AreEqual(this.AssertMethod_Ascending2ExpectedValues.UI行8RowValue, uI行8Row.Value);
        }
        
        /// <summary>
        /// RecordedMethod_Descending
        /// </summary>
        public void RecordedMethod_Descending()
        {
            #region Variable Declarations
            WinButton uILoadButton = this.UIWhitireiaStaffManageWindow.UILoadWindow.UILoadButton;
            WinButton uIDescendingbyNameButton = this.UIWhitireiaStaffManageWindow.UIDescendingbyNameWindow.UIDescendingbyNameButton;
            #endregion

            // Click 'Load' button
            Mouse.Click(uILoadButton, new Point(25, 8));

            // Click 'Descending by Name' button
            Mouse.Click(uIDescendingbyNameButton, new Point(64, 16));
        }
        
        /// <summary>
        /// AssertMethod_Descending - Use 'AssertMethod_DescendingExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_Descending()
        {
            #region Variable Declarations
            WinRow uI行0Row = this.UIWhitireiaStaffManageWindow.UIDataGridView1Window.UIDataGridViewTable.UI行0Row;
            #endregion

            // Verify that the 'Value' property of '行 0' row equals '2011097;Taylor Swift;23/1/1993;taylorswift@hotmail.com;237890'
            Assert.AreEqual(this.AssertMethod_DescendingExpectedValues.UI行0RowValue, uI行0Row.Value);
        }
        
        /// <summary>
        /// AssertMethod_Descending2 - Use 'AssertMethod_Descending2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_Descending2()
        {
            #region Variable Declarations
            WinRow uI行8Row = this.UIWhitireiaStaffManageWindow.UIDataGridView1Window.UIDataGridViewTable.UI行8Row;
            #endregion

            // Verify that the 'Value' property of '行 8' row equals '2006780;Britney Spears;13/11/1975;britneyspears@gmail.com;230920'
            Assert.AreEqual(this.AssertMethod_Descending2ExpectedValues.UI行8RowValue, uI行8Row.Value);
        }
        
        /// <summary>
        /// AssertMethod_Add - Use 'AssertMethod_AddExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod_Add()
        {
            #region Variable Declarations
            WinRow uI行7Row2 = this.UIWhitireiaStaffManageWindow.UIDataGridView1Window.UIDataGridViewTable.UI行7Row2;
            #endregion

            // Verify that the 'Value' property of '行 7' row equals '2010892;Faye Wong;19/9/1989;fayewong@hotmail.com;145000'
            Assert.AreEqual(this.AssertMethod_AddExpectedValues.UI行7Row2Value, uI行7Row2.Value);
        }
        
        #region Properties
        public virtual RecordedMethod_AddParams RecordedMethod_AddParams
        {
            get
            {
                if ((this.mRecordedMethod_AddParams == null))
                {
                    this.mRecordedMethod_AddParams = new RecordedMethod_AddParams();
                }
                return this.mRecordedMethod_AddParams;
            }
        }
        
        public virtual RecordedMethod_IllegalIdInputParams RecordedMethod_IllegalIdInputParams
        {
            get
            {
                if ((this.mRecordedMethod_IllegalIdInputParams == null))
                {
                    this.mRecordedMethod_IllegalIdInputParams = new RecordedMethod_IllegalIdInputParams();
                }
                return this.mRecordedMethod_IllegalIdInputParams;
            }
        }
        
        public virtual AssertMethod_IllegalIdInputExpectedValues AssertMethod_IllegalIdInputExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_IllegalIdInputExpectedValues == null))
                {
                    this.mAssertMethod_IllegalIdInputExpectedValues = new AssertMethod_IllegalIdInputExpectedValues();
                }
                return this.mAssertMethod_IllegalIdInputExpectedValues;
            }
        }
        
        public virtual RecordedMethod_IllegalNameInputParams RecordedMethod_IllegalNameInputParams
        {
            get
            {
                if ((this.mRecordedMethod_IllegalNameInputParams == null))
                {
                    this.mRecordedMethod_IllegalNameInputParams = new RecordedMethod_IllegalNameInputParams();
                }
                return this.mRecordedMethod_IllegalNameInputParams;
            }
        }
        
        public virtual AssertMethod_IllegalNameInputExpectedValues AssertMethod_IllegalNameInputExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_IllegalNameInputExpectedValues == null))
                {
                    this.mAssertMethod_IllegalNameInputExpectedValues = new AssertMethod_IllegalNameInputExpectedValues();
                }
                return this.mAssertMethod_IllegalNameInputExpectedValues;
            }
        }
        
        public virtual RecordedMethod_IllegalEmailInputParams RecordedMethod_IllegalEmailInputParams
        {
            get
            {
                if ((this.mRecordedMethod_IllegalEmailInputParams == null))
                {
                    this.mRecordedMethod_IllegalEmailInputParams = new RecordedMethod_IllegalEmailInputParams();
                }
                return this.mRecordedMethod_IllegalEmailInputParams;
            }
        }
        
        public virtual AssertMethod_lllegalEmailInputExpectedValues AssertMethod_lllegalEmailInputExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_lllegalEmailInputExpectedValues == null))
                {
                    this.mAssertMethod_lllegalEmailInputExpectedValues = new AssertMethod_lllegalEmailInputExpectedValues();
                }
                return this.mAssertMethod_lllegalEmailInputExpectedValues;
            }
        }
        
        public virtual RecordedMethod_IllegalDOBParams RecordedMethod_IllegalDOBParams
        {
            get
            {
                if ((this.mRecordedMethod_IllegalDOBParams == null))
                {
                    this.mRecordedMethod_IllegalDOBParams = new RecordedMethod_IllegalDOBParams();
                }
                return this.mRecordedMethod_IllegalDOBParams;
            }
        }
        
        public virtual AssertMethod_IllegalDOBExpectedValues AssertMethod_IllegalDOBExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_IllegalDOBExpectedValues == null))
                {
                    this.mAssertMethod_IllegalDOBExpectedValues = new AssertMethod_IllegalDOBExpectedValues();
                }
                return this.mAssertMethod_IllegalDOBExpectedValues;
            }
        }
        
        public virtual RecordedMethod_IllegalSalaryInputParams RecordedMethod_IllegalSalaryInputParams
        {
            get
            {
                if ((this.mRecordedMethod_IllegalSalaryInputParams == null))
                {
                    this.mRecordedMethod_IllegalSalaryInputParams = new RecordedMethod_IllegalSalaryInputParams();
                }
                return this.mRecordedMethod_IllegalSalaryInputParams;
            }
        }
        
        public virtual AssertMethod_IllegalSalaryInputExpectedValues AssertMethod_IllegalSalaryInputExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_IllegalSalaryInputExpectedValues == null))
                {
                    this.mAssertMethod_IllegalSalaryInputExpectedValues = new AssertMethod_IllegalSalaryInputExpectedValues();
                }
                return this.mAssertMethod_IllegalSalaryInputExpectedValues;
            }
        }
        
        public virtual AssertMethod_AscendingExpectedValues AssertMethod_AscendingExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_AscendingExpectedValues == null))
                {
                    this.mAssertMethod_AscendingExpectedValues = new AssertMethod_AscendingExpectedValues();
                }
                return this.mAssertMethod_AscendingExpectedValues;
            }
        }
        
        public virtual AssertMethod_Ascending2ExpectedValues AssertMethod_Ascending2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_Ascending2ExpectedValues == null))
                {
                    this.mAssertMethod_Ascending2ExpectedValues = new AssertMethod_Ascending2ExpectedValues();
                }
                return this.mAssertMethod_Ascending2ExpectedValues;
            }
        }
        
        public virtual AssertMethod_DescendingExpectedValues AssertMethod_DescendingExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_DescendingExpectedValues == null))
                {
                    this.mAssertMethod_DescendingExpectedValues = new AssertMethod_DescendingExpectedValues();
                }
                return this.mAssertMethod_DescendingExpectedValues;
            }
        }
        
        public virtual AssertMethod_Descending2ExpectedValues AssertMethod_Descending2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_Descending2ExpectedValues == null))
                {
                    this.mAssertMethod_Descending2ExpectedValues = new AssertMethod_Descending2ExpectedValues();
                }
                return this.mAssertMethod_Descending2ExpectedValues;
            }
        }
        
        public virtual AssertMethod_AddExpectedValues AssertMethod_AddExpectedValues
        {
            get
            {
                if ((this.mAssertMethod_AddExpectedValues == null))
                {
                    this.mAssertMethod_AddExpectedValues = new AssertMethod_AddExpectedValues();
                }
                return this.mAssertMethod_AddExpectedValues;
            }
        }
        
        public UIWhitireiaStaffManageWindow UIWhitireiaStaffManageWindow
        {
            get
            {
                if ((this.mUIWhitireiaStaffManageWindow == null))
                {
                    this.mUIWhitireiaStaffManageWindow = new UIWhitireiaStaffManageWindow();
                }
                return this.mUIWhitireiaStaffManageWindow;
            }
        }
        
        public UI确定Window UI确定Window
        {
            get
            {
                if ((this.mUI确定Window == null))
                {
                    this.mUI确定Window = new UI确定Window();
                }
                return this.mUI确定Window;
            }
        }
        
        public UIErrorWindow UIErrorWindow
        {
            get
            {
                if ((this.mUIErrorWindow == null))
                {
                    this.mUIErrorWindow = new UIErrorWindow();
                }
                return this.mUIErrorWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod_AddParams mRecordedMethod_AddParams;
        
        private RecordedMethod_IllegalIdInputParams mRecordedMethod_IllegalIdInputParams;
        
        private AssertMethod_IllegalIdInputExpectedValues mAssertMethod_IllegalIdInputExpectedValues;
        
        private RecordedMethod_IllegalNameInputParams mRecordedMethod_IllegalNameInputParams;
        
        private AssertMethod_IllegalNameInputExpectedValues mAssertMethod_IllegalNameInputExpectedValues;
        
        private RecordedMethod_IllegalEmailInputParams mRecordedMethod_IllegalEmailInputParams;
        
        private AssertMethod_lllegalEmailInputExpectedValues mAssertMethod_lllegalEmailInputExpectedValues;
        
        private RecordedMethod_IllegalDOBParams mRecordedMethod_IllegalDOBParams;
        
        private AssertMethod_IllegalDOBExpectedValues mAssertMethod_IllegalDOBExpectedValues;
        
        private RecordedMethod_IllegalSalaryInputParams mRecordedMethod_IllegalSalaryInputParams;
        
        private AssertMethod_IllegalSalaryInputExpectedValues mAssertMethod_IllegalSalaryInputExpectedValues;
        
        private AssertMethod_AscendingExpectedValues mAssertMethod_AscendingExpectedValues;
        
        private AssertMethod_Ascending2ExpectedValues mAssertMethod_Ascending2ExpectedValues;
        
        private AssertMethod_DescendingExpectedValues mAssertMethod_DescendingExpectedValues;
        
        private AssertMethod_Descending2ExpectedValues mAssertMethod_Descending2ExpectedValues;
        
        private AssertMethod_AddExpectedValues mAssertMethod_AddExpectedValues;
        
        private UIWhitireiaStaffManageWindow mUIWhitireiaStaffManageWindow;
        
        private UI确定Window mUI确定Window;
        
        private UIErrorWindow mUIErrorWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod_Add'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod_AddParams
    {
        
        #region Fields
        /// <summary>
        /// Type '2010892' in 'tbxIdInput' text box
        /// </summary>
        public string UITbxIdInputEditText = "2010892";
        
        /// <summary>
        /// Type 'Faye Wong' in 'tbxNameInput' text box
        /// </summary>
        public string UITbxNameInputEditText = "Faye Wong";
        
        /// <summary>
        /// Select '19/09/1989' in 'dateTimePicker1' date time picker
        /// </summary>
        public string UIDateTimePicker1DateTimePickerDateTimeAsString = "19-Sep-1989";
        
        /// <summary>
        /// Type 'fayewong@hotmail.com' in 'tbxEmailInput' text box
        /// </summary>
        public string UITbxEmailInputEditText = "fayewong@hotmail.com";
        
        /// <summary>
        /// Type '145000' in 'tbxSalaryInput' text box
        /// </summary>
        public string UITbxSalaryInputEditText = "145000";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod_IllegalIdInput'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod_IllegalIdInputParams
    {
        
        #region Fields
        /// <summary>
        /// Type '">?":?' in 'tbxIdInput' text box
        /// </summary>
        public string UITbxIdInputEditText = "\">?\":?";
        
        /// <summary>
        /// Type 'Test Lee' in 'tbxNameInput' text box
        /// </summary>
        public string UITbxNameInputEditText = "Test Lee";
        
        /// <summary>
        /// Type 'test@hotmail.com' in 'tbxEmailInput' text box
        /// </summary>
        public string UITbxEmailInputEditText = "test@hotmail.com";
        
        /// <summary>
        /// Type '12300' in 'tbxSalaryInput' text box
        /// </summary>
        public string UITbxSalaryInputEditText = "12300";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_IllegalIdInput'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod_IllegalIdInputExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Error' Dialog equals 'Error'
        /// </summary>
        public string UIErrorDialogName = "Error";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod_IllegalNameInput'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod_IllegalNameInputParams
    {
        
        #region Fields
        /// <summary>
        /// Type '00000' in 'tbxIdInput' text box
        /// </summary>
        public string UITbxIdInputEditText = "00000";
        
        /// <summary>
        /// Type '56'.''.,' in 'tbxNameInput' text box
        /// </summary>
        public string UITbxNameInputEditText = "56\'.\'\'.,";
        
        /// <summary>
        /// Select '28/06/2000' in 'dateTimePicker1' date time picker
        /// </summary>
        public string UIDateTimePicker1DateTimePickerDateTimeAsString = "28-Jun-2000";
        
        /// <summary>
        /// Type 'test@gmail.com' in 'tbxEmailInput' text box
        /// </summary>
        public string UITbxEmailInputEditText = "test@gmail.com";
        
        /// <summary>
        /// Type '111111' in 'tbxSalaryInput' text box
        /// </summary>
        public string UITbxSalaryInputEditText = "111111";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_IllegalNameInput'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod_IllegalNameInputExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Name must be English letters!' label equals 'Name must be English letters!'
        /// </summary>
        public string UINamemustbeEnglishletTextDisplayText = "Name must be English letters!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod_IllegalEmailInput'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod_IllegalEmailInputParams
    {
        
        #region Fields
        /// <summary>
        /// Type '11111' in 'tbxIdInput' text box
        /// </summary>
        public string UITbxIdInputEditText = "11111";
        
        /// <summary>
        /// Type 'Test' in 'tbxNameInput' text box
        /// </summary>
        public string UITbxNameInputEditText = "Test";
        
        /// <summary>
        /// Type 'test@com' in 'tbxEmailInput' text box
        /// </summary>
        public string UITbxEmailInputEditText = "test@com";
        
        /// <summary>
        /// Type '11111' in 'tbxSalaryInput' text box
        /// </summary>
        public string UITbxSalaryInputEditText = "11111";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_lllegalEmailInput'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod_lllegalEmailInputExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Wrong email format!' label equals 'Wrong email format!'
        /// </summary>
        public string UIWrongemailformatTextDisplayText = "Wrong email format!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod_IllegalDOB'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod_IllegalDOBParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1111' in 'tbxIdInput' text box
        /// </summary>
        public string UITbxIdInputEditText = "1111";
        
        /// <summary>
        /// Type 'Test Wang' in 'tbxNameInput' text box
        /// </summary>
        public string UITbxNameInputEditText = "Test Wang";
        
        /// <summary>
        /// Select '14/07/1899' in 'dateTimePicker1' date time picker
        /// </summary>
        public string UIDateTimePicker1DateTimePickerDateTimeAsString = "14-Jul-1899";
        
        /// <summary>
        /// Type 'test@hotmail.com' in 'tbxEmailInput' text box
        /// </summary>
        public string UITbxEmailInputEditText = "test@hotmail.com";
        
        /// <summary>
        /// Type '12345' in 'tbxSalaryInput' text box
        /// </summary>
        public string UITbxSalaryInputEditText = "12345";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_IllegalDOB'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod_IllegalDOBExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Date must be between 1900-2020!' label equals 'Date must be between 1900-2020!'
        /// </summary>
        public string UIDatemustbebetween190TextDisplayText = "Date must be between 1900-2020!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod_IllegalSalaryInput'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod_IllegalSalaryInputParams
    {
        
        #region Fields
        /// <summary>
        /// Type '0000' in 'tbxIdInput' text box
        /// </summary>
        public string UITbxIdInputEditText = "0000";
        
        /// <summary>
        /// Type 'Test Lee' in 'tbxNameInput' text box
        /// </summary>
        public string UITbxNameInputEditText = "Test Lee";
        
        /// <summary>
        /// Type 'test@163.com' in 'tbxEmailInput' text box
        /// </summary>
        public string UITbxEmailInputEditText = "test@163.com";
        
        /// <summary>
        /// Type 'hf;'./' in 'tbxSalaryInput' text box
        /// </summary>
        public string UITbxSalaryInputEditText = "hf;\'./";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_IllegalSalaryInput'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod_IllegalSalaryInputExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Salary must be numbers!' label equals 'Salary must be numbers!'
        /// </summary>
        public string UISalarymustbenumbersTextDisplayText = "Salary must be numbers!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_Ascending'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod_AscendingExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Value' property of '行 0' row equals '2006780;Britney Spears;13/11/1975;britneyspears@gmail.com;230920'
        /// </summary>
        public string UI行0RowValue = "2006780;Britney Spears;13/11/1975;britneyspears@gmail.com;230920";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_Ascending2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod_Ascending2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Value' property of '行 8' row equals '2011097;Taylor Swift;23/1/1993;taylorswift@hotmail.com;237890'
        /// </summary>
        public string UI行8RowValue = "2011097;Taylor Swift;23/1/1993;taylorswift@hotmail.com;237890";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_Descending'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod_DescendingExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Value' property of '行 0' row equals '2011097;Taylor Swift;23/1/1993;taylorswift@hotmail.com;237890'
        /// </summary>
        public string UI行0RowValue = "2011097;Taylor Swift;23/1/1993;taylorswift@hotmail.com;237890";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_Descending2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod_Descending2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Value' property of '行 8' row equals '2006780;Britney Spears;13/11/1975;britneyspears@gmail.com;230920'
        /// </summary>
        public string UI行8RowValue = "2006780;Britney Spears;13/11/1975;britneyspears@gmail.com;230920";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod_Add'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod_AddExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Value' property of '行 7' row equals '2010892;Faye Wong;19/9/1989;fayewong@hotmail.com;145000'
        /// </summary>
        public string UI行7Row2Value = "2010892;Faye Wong;19/9/1989;fayewong@hotmail.com;145000";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWhitireiaStaffManageWindow : WinWindow
    {
        
        public UIWhitireiaStaffManageWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Whitireia Staff Management System";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Whitireia Staff Management System");
            #endregion
        }
        
        #region Properties
        public UITbxNameInputWindow UITbxNameInputWindow
        {
            get
            {
                if ((this.mUITbxNameInputWindow == null))
                {
                    this.mUITbxNameInputWindow = new UITbxNameInputWindow(this);
                }
                return this.mUITbxNameInputWindow;
            }
        }
        
        public UIDateTimePicker1Window UIDateTimePicker1Window
        {
            get
            {
                if ((this.mUIDateTimePicker1Window == null))
                {
                    this.mUIDateTimePicker1Window = new UIDateTimePicker1Window(this);
                }
                return this.mUIDateTimePicker1Window;
            }
        }
        
        public UITbxEmailInputWindow UITbxEmailInputWindow
        {
            get
            {
                if ((this.mUITbxEmailInputWindow == null))
                {
                    this.mUITbxEmailInputWindow = new UITbxEmailInputWindow(this);
                }
                return this.mUITbxEmailInputWindow;
            }
        }
        
        public UITbxSalaryInputWindow UITbxSalaryInputWindow
        {
            get
            {
                if ((this.mUITbxSalaryInputWindow == null))
                {
                    this.mUITbxSalaryInputWindow = new UITbxSalaryInputWindow(this);
                }
                return this.mUITbxSalaryInputWindow;
            }
        }
        
        public UIAddWindow UIAddWindow
        {
            get
            {
                if ((this.mUIAddWindow == null))
                {
                    this.mUIAddWindow = new UIAddWindow(this);
                }
                return this.mUIAddWindow;
            }
        }
        
        public UILoadWindow UILoadWindow
        {
            get
            {
                if ((this.mUILoadWindow == null))
                {
                    this.mUILoadWindow = new UILoadWindow(this);
                }
                return this.mUILoadWindow;
            }
        }
        
        public UIDataGridView1Window UIDataGridView1Window
        {
            get
            {
                if ((this.mUIDataGridView1Window == null))
                {
                    this.mUIDataGridView1Window = new UIDataGridView1Window(this);
                }
                return this.mUIDataGridView1Window;
            }
        }
        
        public UITbxIdInputWindow UITbxIdInputWindow
        {
            get
            {
                if ((this.mUITbxIdInputWindow == null))
                {
                    this.mUITbxIdInputWindow = new UITbxIdInputWindow(this);
                }
                return this.mUITbxIdInputWindow;
            }
        }
        
        public UIClearWindow UIClearWindow
        {
            get
            {
                if ((this.mUIClearWindow == null))
                {
                    this.mUIClearWindow = new UIClearWindow(this);
                }
                return this.mUIClearWindow;
            }
        }
        
        public UIInputStaffInformatioGroup UIInputStaffInformatioGroup
        {
            get
            {
                if ((this.mUIInputStaffInformatioGroup == null))
                {
                    this.mUIInputStaffInformatioGroup = new UIInputStaffInformatioGroup(this);
                }
                return this.mUIInputStaffInformatioGroup;
            }
        }
        
        public UIAscendingbyNameWindow UIAscendingbyNameWindow
        {
            get
            {
                if ((this.mUIAscendingbyNameWindow == null))
                {
                    this.mUIAscendingbyNameWindow = new UIAscendingbyNameWindow(this);
                }
                return this.mUIAscendingbyNameWindow;
            }
        }
        
        public UIDescendingbyNameWindow UIDescendingbyNameWindow
        {
            get
            {
                if ((this.mUIDescendingbyNameWindow == null))
                {
                    this.mUIDescendingbyNameWindow = new UIDescendingbyNameWindow(this);
                }
                return this.mUIDescendingbyNameWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITbxNameInputWindow mUITbxNameInputWindow;
        
        private UIDateTimePicker1Window mUIDateTimePicker1Window;
        
        private UITbxEmailInputWindow mUITbxEmailInputWindow;
        
        private UITbxSalaryInputWindow mUITbxSalaryInputWindow;
        
        private UIAddWindow mUIAddWindow;
        
        private UILoadWindow mUILoadWindow;
        
        private UIDataGridView1Window mUIDataGridView1Window;
        
        private UITbxIdInputWindow mUITbxIdInputWindow;
        
        private UIClearWindow mUIClearWindow;
        
        private UIInputStaffInformatioGroup mUIInputStaffInformatioGroup;
        
        private UIAscendingbyNameWindow mUIAscendingbyNameWindow;
        
        private UIDescendingbyNameWindow mUIDescendingbyNameWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITbxNameInputWindow : WinWindow
    {
        
        public UITbxNameInputWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tbxNameInput";
            this.WindowTitles.Add("Whitireia Staff Management System");
            #endregion
        }
        
        #region Properties
        public WinEdit UITbxNameInputEdit
        {
            get
            {
                if ((this.mUITbxNameInputEdit == null))
                {
                    this.mUITbxNameInputEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITbxNameInputEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Email:";
                    this.mUITbxNameInputEdit.WindowTitles.Add("Whitireia Staff Management System");
                    #endregion
                }
                return this.mUITbxNameInputEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITbxNameInputEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDateTimePicker1Window : WinWindow
    {
        
        public UIDateTimePicker1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dateTimePicker1";
            this.WindowTitles.Add("Whitireia Staff Management System");
            #endregion
        }
        
        #region Properties
        public WinDateTimePicker UIDateTimePicker1DateTimePicker
        {
            get
            {
                if ((this.mUIDateTimePicker1DateTimePicker == null))
                {
                    this.mUIDateTimePicker1DateTimePicker = new WinDateTimePicker(this);
                    #region Search Criteria
                    this.mUIDateTimePicker1DateTimePicker.WindowTitles.Add("Whitireia Staff Management System");
                    #endregion
                }
                return this.mUIDateTimePicker1DateTimePicker;
            }
        }
        #endregion
        
        #region Fields
        private WinDateTimePicker mUIDateTimePicker1DateTimePicker;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITbxEmailInputWindow : WinWindow
    {
        
        public UITbxEmailInputWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tbxEmailInput";
            this.WindowTitles.Add("Whitireia Staff Management System");
            #endregion
        }
        
        #region Properties
        public WinEdit UITbxEmailInputEdit
        {
            get
            {
                if ((this.mUITbxEmailInputEdit == null))
                {
                    this.mUITbxEmailInputEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITbxEmailInputEdit.WindowTitles.Add("Whitireia Staff Management System");
                    #endregion
                }
                return this.mUITbxEmailInputEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITbxEmailInputEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITbxSalaryInputWindow : WinWindow
    {
        
        public UITbxSalaryInputWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tbxSalaryInput";
            this.WindowTitles.Add("Whitireia Staff Management System");
            #endregion
        }
        
        #region Properties
        public WinEdit UITbxSalaryInputEdit
        {
            get
            {
                if ((this.mUITbxSalaryInputEdit == null))
                {
                    this.mUITbxSalaryInputEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITbxSalaryInputEdit.WindowTitles.Add("Whitireia Staff Management System");
                    #endregion
                }
                return this.mUITbxSalaryInputEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITbxSalaryInputEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAddWindow : WinWindow
    {
        
        public UIAddWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSaveInput";
            this.WindowTitles.Add("Whitireia Staff Management System");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[WinButton.PropertyNames.Name] = "Add";
                    this.mUIAddButton.WindowTitles.Add("Whitireia Staff Management System");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILoadWindow : WinWindow
    {
        
        public UILoadWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnLoad";
            this.WindowTitles.Add("Whitireia Staff Management System");
            #endregion
        }
        
        #region Properties
        public WinButton UILoadButton
        {
            get
            {
                if ((this.mUILoadButton == null))
                {
                    this.mUILoadButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILoadButton.SearchProperties[WinButton.PropertyNames.Name] = "Load";
                    this.mUILoadButton.WindowTitles.Add("Whitireia Staff Management System");
                    #endregion
                }
                return this.mUILoadButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILoadButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDataGridView1Window : WinWindow
    {
        
        public UIDataGridView1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dataGridView1";
            this.WindowTitles.Add("Whitireia Staff Management System");
            #endregion
        }
        
        #region Properties
        public UIDataGridViewTable UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDataGridViewTable mUIDataGridViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDataGridViewTable : WinTable
    {
        
        public UIDataGridViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("Whitireia Staff Management System");
            #endregion
        }
        
        #region Properties
        public UI行7Row UI行7Row
        {
            get
            {
                if ((this.mUI行7Row == null))
                {
                    this.mUI行7Row = new UI行7Row(this);
                }
                return this.mUI行7Row;
            }
        }
        
        public UI行7Row1 UI行7Row1
        {
            get
            {
                if ((this.mUI行7Row1 == null))
                {
                    this.mUI行7Row1 = new UI行7Row1(this);
                }
                return this.mUI行7Row1;
            }
        }
        
        public WinRow UI行8Row
        {
            get
            {
                if ((this.mUI行8Row == null))
                {
                    this.mUI行8Row = new WinRow(this);
                    #region Search Criteria
                    this.mUI行8Row.SearchProperties[WinRow.PropertyNames.Name] = "行 8";
                    this.mUI行8Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUI行8Row.WindowTitles.Add("Whitireia Staff Management System");
                    #endregion
                }
                return this.mUI行8Row;
            }
        }
        
        public WinRow UI行0Row
        {
            get
            {
                if ((this.mUI行0Row == null))
                {
                    this.mUI行0Row = new WinRow(this);
                    #region Search Criteria
                    this.mUI行0Row.SearchProperties[WinRow.PropertyNames.Name] = "行 0";
                    this.mUI行0Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUI行0Row.WindowTitles.Add("Whitireia Staff Management System");
                    #endregion
                }
                return this.mUI行0Row;
            }
        }
        
        public WinRow UI行7Row2
        {
            get
            {
                if ((this.mUI行7Row2 == null))
                {
                    this.mUI行7Row2 = new WinRow(this);
                    #region Search Criteria
                    this.mUI行7Row2.SearchProperties[WinRow.PropertyNames.Name] = "行 7";
                    this.mUI行7Row2.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUI行7Row2.WindowTitles.Add("Whitireia Staff Management System");
                    #endregion
                }
                return this.mUI行7Row2;
            }
        }
        #endregion
        
        #region Fields
        private UI行7Row mUI行7Row;
        
        private UI行7Row1 mUI行7Row1;
        
        private WinRow mUI行8Row;
        
        private WinRow mUI行0Row;
        
        private WinRow mUI行7Row2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UI行7Row : WinRow
    {
        
        public UI行7Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Faye Wong;28/6/1989;fayewong@gmail.com;145000", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Whitireia Staff Management System");
            #endregion
        }
        
        #region Properties
        public WinCell UIItem2011056Cell
        {
            get
            {
                if ((this.mUIItem2011056Cell == null))
                {
                    this.mUIItem2011056Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem2011056Cell.SearchProperties[WinCell.PropertyNames.Value] = "2011056";
                    this.mUIItem2011056Cell.WindowTitles.Add("Whitireia Staff Management System");
                    #endregion
                }
                return this.mUIItem2011056Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIItem2011056Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UI行7Row1 : WinRow
    {
        
        public UI行7Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Faye Wong;17/10/1989;fayewong@gmail.com;145000", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Whitireia Staff Management System");
            #endregion
        }
        
        #region Properties
        public WinCell UIFayeWongCell
        {
            get
            {
                if ((this.mUIFayeWongCell == null))
                {
                    this.mUIFayeWongCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFayeWongCell.SearchProperties[WinCell.PropertyNames.Value] = "Faye Wong";
                    this.mUIFayeWongCell.WindowTitles.Add("Whitireia Staff Management System");
                    #endregion
                }
                return this.mUIFayeWongCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFayeWongCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITbxIdInputWindow : WinWindow
    {
        
        public UITbxIdInputWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tbxIdInput";
            this.WindowTitles.Add("Whitireia Staff Management System");
            #endregion
        }
        
        #region Properties
        public WinEdit UITbxIdInputEdit
        {
            get
            {
                if ((this.mUITbxIdInputEdit == null))
                {
                    this.mUITbxIdInputEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITbxIdInputEdit.SearchProperties[WinEdit.PropertyNames.Name] = "ID:";
                    this.mUITbxIdInputEdit.WindowTitles.Add("Whitireia Staff Management System");
                    #endregion
                }
                return this.mUITbxIdInputEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITbxIdInputEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIClearWindow : WinWindow
    {
        
        public UIClearWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnClear";
            this.WindowTitles.Add("Whitireia Staff Management System");
            #endregion
        }
        
        #region Properties
        public WinButton UIClearButton
        {
            get
            {
                if ((this.mUIClearButton == null))
                {
                    this.mUIClearButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIClearButton.SearchProperties[WinButton.PropertyNames.Name] = "Clear";
                    this.mUIClearButton.WindowTitles.Add("Whitireia Staff Management System");
                    #endregion
                }
                return this.mUIClearButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIClearButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIInputStaffInformatioGroup : WinGroup
    {
        
        public UIInputStaffInformatioGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Input Staff Information";
            this.WindowTitles.Add("Whitireia Staff Management System");
            #endregion
        }
        
        #region Properties
        public WinWindow UITbxNameInputWindow
        {
            get
            {
                if ((this.mUITbxNameInputWindow == null))
                {
                    this.mUITbxNameInputWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUITbxNameInputWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Email:";
                    this.mUITbxNameInputWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUITbxNameInputWindow.WindowTitles.Add("Whitireia Staff Management System");
                    #endregion
                }
                return this.mUITbxNameInputWindow;
            }
        }
        
        public WinWindow UITbxSalaryInputWindow
        {
            get
            {
                if ((this.mUITbxSalaryInputWindow == null))
                {
                    this.mUITbxSalaryInputWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUITbxSalaryInputWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUITbxSalaryInputWindow.WindowTitles.Add("Whitireia Staff Management System");
                    #endregion
                }
                return this.mUITbxSalaryInputWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUITbxNameInputWindow;
        
        private WinWindow mUITbxSalaryInputWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAscendingbyNameWindow : WinWindow
    {
        
        public UIAscendingbyNameWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "SortAZ";
            this.WindowTitles.Add("Whitireia Staff Management System");
            #endregion
        }
        
        #region Properties
        public WinButton UIAscendingbyNameButton
        {
            get
            {
                if ((this.mUIAscendingbyNameButton == null))
                {
                    this.mUIAscendingbyNameButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAscendingbyNameButton.SearchProperties[WinButton.PropertyNames.Name] = "Ascending by Name";
                    this.mUIAscendingbyNameButton.WindowTitles.Add("Whitireia Staff Management System");
                    #endregion
                }
                return this.mUIAscendingbyNameButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAscendingbyNameButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDescendingbyNameWindow : WinWindow
    {
        
        public UIDescendingbyNameWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "SortZA";
            this.WindowTitles.Add("Whitireia Staff Management System");
            #endregion
        }
        
        #region Properties
        public WinButton UIDescendingbyNameButton
        {
            get
            {
                if ((this.mUIDescendingbyNameButton == null))
                {
                    this.mUIDescendingbyNameButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDescendingbyNameButton.SearchProperties[WinButton.PropertyNames.Name] = "Descending by Name";
                    this.mUIDescendingbyNameButton.WindowTitles.Add("Whitireia Staff Management System");
                    #endregion
                }
                return this.mUIDescendingbyNameButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDescendingbyNameButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UI确定Window : WinWindow
    {
        
        public UI确定Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "确定";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("确定");
            #endregion
        }
        
        #region Properties
        public WinButton UI确定Button
        {
            get
            {
                if ((this.mUI确定Button == null))
                {
                    this.mUI确定Button = new WinButton(this);
                    #region Search Criteria
                    this.mUI确定Button.SearchProperties[WinButton.PropertyNames.Name] = "确定";
                    this.mUI确定Button.WindowTitles.Add("确定");
                    #endregion
                }
                return this.mUI确定Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI确定Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIErrorWindow : WinWindow
    {
        
        public UIErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public WinControl UIErrorDialog
        {
            get
            {
                if ((this.mUIErrorDialog == null))
                {
                    this.mUIErrorDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIErrorDialog.SearchProperties[UITestControl.PropertyNames.Name] = "Error";
                    this.mUIErrorDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUIErrorDialog.WindowTitles.Add("Error");
                    #endregion
                }
                return this.mUIErrorDialog;
            }
        }
        
        public UI确定Window1 UI确定Window
        {
            get
            {
                if ((this.mUI确定Window == null))
                {
                    this.mUI确定Window = new UI确定Window1(this);
                }
                return this.mUI确定Window;
            }
        }
        
        public UINamemustbeEnglishletWindow UINamemustbeEnglishletWindow
        {
            get
            {
                if ((this.mUINamemustbeEnglishletWindow == null))
                {
                    this.mUINamemustbeEnglishletWindow = new UINamemustbeEnglishletWindow(this);
                }
                return this.mUINamemustbeEnglishletWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIErrorDialog;
        
        private UI确定Window1 mUI确定Window;
        
        private UINamemustbeEnglishletWindow mUINamemustbeEnglishletWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UI确定Window1 : WinWindow
    {
        
        public UI确定Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public WinButton UI确定Button
        {
            get
            {
                if ((this.mUI确定Button == null))
                {
                    this.mUI确定Button = new WinButton(this);
                    #region Search Criteria
                    this.mUI确定Button.SearchProperties[WinButton.PropertyNames.Name] = "确定";
                    this.mUI确定Button.WindowTitles.Add("Error");
                    #endregion
                }
                return this.mUI确定Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI确定Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINamemustbeEnglishletWindow : WinWindow
    {
        
        public UINamemustbeEnglishletWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public WinText UINamemustbeEnglishletText
        {
            get
            {
                if ((this.mUINamemustbeEnglishletText == null))
                {
                    this.mUINamemustbeEnglishletText = new WinText(this);
                    #region Search Criteria
                    this.mUINamemustbeEnglishletText.SearchProperties[WinText.PropertyNames.Name] = "Name must be English letters!";
                    this.mUINamemustbeEnglishletText.WindowTitles.Add("Error");
                    #endregion
                }
                return this.mUINamemustbeEnglishletText;
            }
        }
        
        public WinText UIWrongemailformatText
        {
            get
            {
                if ((this.mUIWrongemailformatText == null))
                {
                    this.mUIWrongemailformatText = new WinText(this);
                    #region Search Criteria
                    this.mUIWrongemailformatText.SearchProperties[WinText.PropertyNames.Name] = "Wrong email format!";
                    this.mUIWrongemailformatText.WindowTitles.Add("Error");
                    #endregion
                }
                return this.mUIWrongemailformatText;
            }
        }
        
        public WinText UIDatemustbebetween190Text
        {
            get
            {
                if ((this.mUIDatemustbebetween190Text == null))
                {
                    this.mUIDatemustbebetween190Text = new WinText(this);
                    #region Search Criteria
                    this.mUIDatemustbebetween190Text.SearchProperties[WinText.PropertyNames.Name] = "Date must be between 1900-2020!";
                    this.mUIDatemustbebetween190Text.WindowTitles.Add("Error");
                    #endregion
                }
                return this.mUIDatemustbebetween190Text;
            }
        }
        
        public WinText UISalarymustbenumbersText
        {
            get
            {
                if ((this.mUISalarymustbenumbersText == null))
                {
                    this.mUISalarymustbenumbersText = new WinText(this);
                    #region Search Criteria
                    this.mUISalarymustbenumbersText.SearchProperties[WinText.PropertyNames.Name] = "Salary must be numbers!";
                    this.mUISalarymustbenumbersText.WindowTitles.Add("Error");
                    #endregion
                }
                return this.mUISalarymustbenumbersText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUINamemustbeEnglishletText;
        
        private WinText mUIWrongemailformatText;
        
        private WinText mUIDatemustbebetween190Text;
        
        private WinText mUISalarymustbenumbersText;
        #endregion
    }
}
